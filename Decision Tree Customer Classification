{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Library and Data Import"],"metadata":{"id":"DsDZGky5UnwF"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"GH5YmEMqNw3e"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd                                            \n","import numpy as np\n","from sklearn.model_selection import train_test_split \n","from sklearn.tree import DecisionTreeClassifier \n","import sklearn.model_selection as ms     \n","from sklearn import tree                                   \n","from sklearn.metrics import classification_report, confusion_matrix \n","from IPython.display import Image                 \n","import pydotplus                                            \n","import os  \n","\n","file_path = '/content/drive/MyDrive/INFO-614 Data Mining/churn.csv'\n","df = pd.read_csv(file_path)\n","\n","pd.set_option('display.max_columns', None)\n","df.head()"],"metadata":{"id":"mvLV7AjYUr_m"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Remove Rows with a Missing Value"],"metadata":{"id":"__6glKOtVI1l"}},{"cell_type":"code","source":["display(df.isna().sum())\n","df = df.dropna()"],"metadata":{"id":"3vE0Ssy8VScI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Summary Statistics"],"metadata":{"id":"it7bPFR9VXt3"}},{"cell_type":"code","source":["df_summary = df.describe()\n","df_summary"],"metadata":{"id":"TgbYpPBmVZil"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Preprocessing"],"metadata":{"id":"O3ZcvTYZkSr6"}},{"cell_type":"code","source":["df.columns = df.columns.str.replace (' ','_')\n","\n","df.Gender = df.Gender.replace('Male',0)\n","df.Gender = df.Gender.replace('Female',1)\n","df.Married = df.Married.replace('No',0)\n","df.Married = df.Married.replace('Yes',1)\n","\n","df.Offer = df.Offer.replace ('None',0)\n","df.Offer = df.Offer.replace ('Offer B',1)\n","df.Offer = df.Offer.replace ('Offer E',2)\n","df.Offer = df.Offer.replace ('Offer D',3)\n","df.Offer = df.Offer.replace ('Offer A',4)\n","df.Offer = df.Offer.replace ('Offer C',5)\n","\n","df.Multiple_Lines = df.Multiple_Lines.replace ('No',0)\n","df.Multiple_Lines = df.Multiple_Lines.replace ('Yes',1)\n","\n","df.Internet_Service = df.Internet_Service.replace ('No',0)\n","df.Internet_Service = df.Internet_Service.replace ('Yes',1)\n","\n","display(df['Paperless_Billing'].value_counts())\n","\n","df.Paperless_Billing = df.Paperless_Billing.replace ('No',0)\n","df.Paperless_Billing = df.Paperless_Billing.replace ('Yes',1)\n","\n","display(df['Customer_Status'].value_counts())\n","\n","df.Customer_Status = df.Customer_Status.replace ('Stayed',0)\n","df.Customer_Status = df.Customer_Status.replace ('Churned',1)\n","df = df[df['Customer_Status'] != 'Joined']\n","\n","display(df.head() )\n","display(df['Customer_Status'].value_counts())"],"metadata":{"id":"nKWtdOCXkVFj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Subset the Dataframe"],"metadata":{"id":"lJ1WOY5hVeza"}},{"cell_type":"code","source":["df.head()"],"metadata":{"id":"pNhHSsq-VgfJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = df[[\"Gender\", \"Age\", \"Married\", \"Number_of_Dependents\", \"Zip_Code\", \"Tenure_in_Months\", \"Offer\", \"Multiple_Lines\", \"Internet_Service\", \"Paperless_Billing\", \"Total_Revenue\", \"Customer_Status\"]]"],"metadata":{"id":"rjjq8gkxVjzs"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Set Train and Test Sets\n","\n","\n","\n"],"metadata":{"id":"Y51CxK6kszQ9"}},{"cell_type":"code","source":["X = (df.iloc[:,:-1])\n","y = (df.iloc[:, -1])\n","y = y.astype('int')\n","\n","\n","X_train, X_test, y_train, y_test = ms.train_test_split(X, y, test_size = 0.4, random_state = 1)\n","\n","X_train \n","X_test\n","y_train\n","y_test"],"metadata":{"id":"98lyvgYzs3Yp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Tree Induction"],"metadata":{"id":"kU86oeaKuGXo"}},{"cell_type":"code","source":["dt_clf = DecisionTreeClassifier(criterion='gini', max_depth=12, min_samples_split = 5, random_state=0)\n","\n","dt_clf = dt_clf.fit(X_train, y_train)\n","                    \n","y_pred = dt_clf.predict(X_test)"],"metadata":{"id":"8nna5z_CuI1V"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Tree Visualization"],"metadata":{"id":"pxuKFRvw1Vp-"}},{"cell_type":"code","source":["import io\n","import pydot\n","from IPython.core.display import Image\n","from sklearn.tree import export_graphviz\n","import matplotlib as mpl\n","\n","\n","\n","def draw_decision_tree(model):\n","    dot_buf = io.StringIO()\n","    export_graphviz(model, out_file=dot_buf, feature_names=feature_names)\n","    graph = pydot.graph_from_dot_data(dot_buf.getvalue())[0]\n","    image = graph.create_png()\n","    return Image(image)\n","\n","\n","def plot_decision_regions(X, y, model, title):\n","    resolution = 0.01\n","    markers = ('s', '^', 'o')\n","    colors = ('red', 'blue', 'lightgreen')\n","    cmap = mpl.colors.ListedColormap(colors)\n","\n","    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n","    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n","    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),\n","                           np.arange(x2_min, x2_max, resolution))\n","    Z = model.predict(\n","        np.array([xx1.ravel(), xx2.ravel()]).T).reshape(xx1.shape)\n","\n","    plt.contour(xx1, xx2, Z, cmap=mpl.colors.ListedColormap(['k']))\n","    plt.contourf(xx1, xx2, Z, alpha=0.4, cmap=cmap)\n","    plt.xlim(xx1.min(), xx1.max())\n","    plt.ylim(xx2.min(), xx2.max())\n","\n","    for idx, cl in enumerate(np.unique(y)):\n","        plt.scatter(x=X[y == cl, 0], y=X[y == cl, 1], alpha=0.8,\n","                    c=[cmap(idx)], marker=markers[idx], s=80, label=cl)\n","\n","    plt.xlabel(data.feature_names[2])\n","    plt.ylabel(data.feature_names[3])\n","    plt.legend(loc='upper left')\n","    plt.title(title)\n","\n","    return Z"],"metadata":{"id":"VGnRcJiZ1gFT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["feature_names = df.columns.tolist()\n","feature_names = feature_names[0:11]\n","target_name = np.array(['Stay', 'Churn'])\n","\n","dt_dot_data = tree.export_graphviz(dt_clf, out_file = None,\n","                                  feature_names = feature_names,\n","                                  class_names = target_name,\n","                                  filled = True, rounded = True,\n","                                  special_characters = True)\n","\n","dt_graph = pydotplus.graph_from_dot_data\n","draw_decision_tree(dt_clf)"],"metadata":{"id":"TF0ooc4Z641t"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Validation"],"metadata":{"id":"jIZvpWiMHx9x"}},{"cell_type":"code","source":["import sklearn.metrics as mt\n","\n","print('Train_Accuracy: ', dt_clf.score(X_train, y_train),'\\n')\n","\n","accuracy = mt.accuracy_score(y_test, y_pred)\n","recall = mt.recall_score(y_test, y_pred)\n","precision = mt.precision_score(y_test, y_pred)\n","f1_score = mt.f1_score(y_test, y_pred)\n","matrix = mt.confusion_matrix(y_test, y_pred)\n","\n","print('Accuracy: ', format(accuracy,'.2f'),'\\n')\n","print('Recall: ', format(recall,'.2f'),'\\n')\n","print('Precision: ', format(precision,'.2f'),'\\n')\n","print('F1_score: ', format(f1_score,'.2f'),'\\n')\n","print('Confusion Matrix:','\\n', matrix)"],"metadata":{"id":"VAHBlmOXHz6z"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Cross-Validation"],"metadata":{"id":"nhUB6yfWIDez"}},{"cell_type":"code","source":["from sklearn.model_selection import cross_val_score, cross_validate\n","from sklearn.model_selection import cross_val_predict\n","\n","y_pred_cross = cross_val_predict(dt_clf, X, y, cv=10)\n","accuracy = mt.accuracy_score(y, y_pred_cross)\n","recall = mt.recall_score(y, y_pred_cross)\n","precision = mt.precision_score(y, y_pred_cross)\n","f1_score = mt.f1_score(y, y_pred_cross)\n","matrix = mt.confusion_matrix(y, y_pred_cross)\n","\n","print('Accuracy: ', format(accuracy,'.2f'),'\\n')\n","print('Recall: ', format(recall,'.2f'),'\\n')\n","print('Precision: ', format(precision,'.2f'),'\\n')\n","print('F1_score: ', format(f1_score,'.2f'),'\\n')\n","print('Confusion Matrix:','\\n', matrix)"],"metadata":{"id":"n4kXXb5yIGo-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Paremeter Pruning"],"metadata":{"id":"Wg-jUThxITCy"}},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score\n","import matplotlib.pyplot as plt\n","\n","\n","mean_test_accuracy = []\n","train_accuracy = []\n","for max_depth in np.arange(3, 10):\n","    model1 = DecisionTreeClassifier(max_depth=max_depth).fit(X, y)\n","    train_accuracy.append(accuracy_score(y, model1.predict(X)))\n","    mean_test_accuracy.append(cross_val_score(model1, X, y, scoring=\"accuracy\", cv=5).mean())\n","    \n","    \n","plt.plot(np.arange(3, 10), train_accuracy)\n","plt.plot(np.arange(3, 10), mean_test_accuracy)\n","plt.show()"],"metadata":{"id":"dlgfXybTIWHU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV\n","\n","t_clf = DecisionTreeClassifier(random_state=0)\n","parameters = {'max_depth': [4, 8, 12],\n","              'min_samples_split': [5, 10, 15],\n","              'splitter': ['best', 'random'],}\n","\n","grid_dt = GridSearchCV(dt_clf, param_grid = parameters, cv = 5 )\n","\n","grid_dt.fit(X_train, y_train)\n","\n","result = pd.DataFrame(grid_dt.cv_results_['params'])\n","result['mean_test_score'] = grid_dt.cv_results_['mean_test_score']\n","result.sort_values(by='mean_test_score', ascending=False)"],"metadata":{"id":"FWCKqf89IwSS"},"execution_count":null,"outputs":[]}]}